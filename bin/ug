#!/usr/bin/python3

"""Unholy Grail.

Usage:
  ug (en|encode|de|decode|tok|ast|hl|ir|i|it|eval|test) [FILE | -s STR] [ARGS...]

Arguments:
  FILE          Source file.

Options:
  -h --help     Show this screen.
  -s STR        Use the provided string instead of a file.
"""

from docopt import docopt

from descr import boxy_terminus, HTMLRuleBuilder as RB, descr
from descr.util import Table, Group

from ug import (
    encode, decode,
    Source, parse,
    compile, SyntaxError
    )

from ug.lib import hashstruct as hs, struct, hastag, gettag
from ug.parsing.ug.tokenizer import tokenizer
from ug.compile.topy import evaluate
from ug.format import errors
from ug.format.displayrules import ugdescr, ast_rules, hl_rules


qq = """

quasiquote_tr =
    ;; quasiquote macro transformer (calling quasiquote_tr will not
    ;; evaluate anything unless the transformer is used to implement a
    ;; macro). If we were to implement the "." operator as a
    ;; quasiquote macro (using quasiquote_tr), then:

    ;; a = .(1)        ;; a <- #value[1]
    ;; b = .(x + y)    ;; b <- #oper["+", "x", "y"]
    ;; c = .(x y)      ;; c <- #juxt["x", "y"]
    ;; d = .(^a ^b)    ;; d <- #juxt[#value[1], #juxt["x", "y"]]
    ;; e = .(^=1 ^b)   ;; d <- #juxt[#value[1], #juxt["x", "y"]]

    ;; In other words, ^x inserts x in the AST directly, whereas ^=x
    ;; inserts #value[x] (UG keeps a strict discipline that any
    ;; literal, even integers or strings, must be wrapped with #value)

    #oper["^", #value[v], expr] when (v == Void) ->
        expr
    #oper["^=", #value[v], expr] when (v == Void) ->
        #juxt[#value[#value], #square[expr]]
    #oper[op, x, y] ->
        #juxt[#value[#oper], #square[quasiquote_tr op, quasiquote_tr x, quasiquote_tr y]]
    #juxt[*args] ->
        #juxt[#value[#juxt], #square (args map quasiquote_tr)]
    #square[*args] ->
        #juxt[#value[#square], #square (args map quasiquote_tr)]
    #begin[*args] ->
        #juxt[#value[#begin], #square (args map quasiquote_tr)]
    #curly[*args] ->
        #juxt[#value[#curly], #square (args map quasiquote_tr)]
    #value[x] ->
        #juxt[#value[#value], #square[#value[x]]]
    str s ->
        #juxt[#value[symbol], #square[#value[s]]]

addmacro[".", [env, node, #seq[_, arg]] -> quasiquote_tr arg]
None

"""


def descr2(x, recurse = None):
    v = descr(x, descr2)
    if isinstance(x, struct):
        if hastag(x, "location") and gettag(x, "location"):
            return [{"$located"}] + list(v)
        else:
            return [{"!located"}] + list(v)
    else:
        return v


class prerror:
    def __enter__(self):
        pass
    def __exit__(self, type, value, traceback):
        if type is None:
            return True
        elif True: # issubclass(type, SyntaxError):
            rules = RB().pclasses(".{@ErrorPrinter} .location", "C=3")
            rules.rearrange(".hl1, .hl2, .hl3, .hlE",
                            lambda classes, children: ["_"]*len(children[0]) if not children[0].strip() else children)

            e = errors.process_error(value)
            pr = boxy_terminus(rules = rules)
            if e is None:
                pr(value)
                return True
            else:
                value.__traceback__ = None
                pr(e)
                return True

def get_source(args):
    if args["FILE"]:
        try:
            s = open(args["FILE"]).read()
            path = args["FILE"]
        except IOError as e:
            exit(e)
    else:
        s = args["-s"]
        path = None
    return s, path

def needs_source(f):
    def newf(args):
        s, path = get_source(args)
        return f(s, path)
    return newf

@needs_source
def x_en(s, path):
    print(encode(s))
x_encode = x_en

@needs_source
def x_de(s, path):
    print(decode(s))
x_decode = x_de

@needs_source
def x_tok(s, path):
    rules = RB()
    rules.hide(".source_header")
    rules.mclasses(".table > * > .{@str}", {"scalar", "@str"})
    pr = boxy_terminus(rules = ast_rules)
    things = []
    for entry in tokenizer(Source(s, url = path)):
        things.append([str(entry), Group([entry.loc])])
    pr(Table(things))

@needs_source
def x_ast(s, path):
    result = parse(Source(s, url = path))
    pr = boxy_terminus()
    pr((result), rules = ast_rules, descr = ugdescr)

@needs_source
def x_hl(s, path):
    from ug.format.highlight import highlight
    ast = parse(Source(s, url = path))
    pr = boxy_terminus()
    pr(highlight(ast), rules = hl_rules)
    # pr((result), rules = rules, descr = ugdescr)

@needs_source
def x_ir(s, path):
    rules = RB()
    ast = parse(Source(s, url = path))
    result = compile(ast)
    pr = boxy_terminus()
    rules.css_border(".{!located}", "4px solid red")
    pr(result, rules = ast_rules, descr = ugdescr)
    # pr(result, descr = ugdescr)

@needs_source
def x_eval(s, path):
    exec_command(qq, {})
    src = Source(s, url = path)
    ast = parse(src)
    ast2 = compile(ast)
    print(evaluate(ast2, source = src))

def exec_command(command, env = None):
    env = env or {}
    src = Source(command, url = "<string>")
    ast = parse(src)
    ast2 = compile(ast, False)
    try:
        result = evaluate(ast2, source = src, d = env)
        if result is not None:
            print(repr(result))
    except Exception as e:
        print("!!!", e)

def x_i(args):
    import readline
    env = {}
    print("Unholy Grail 0.0")

    exec_command(qq, env)

    while 1:
        try:
            command = input("<> ")
        except EOFError:
            print()
            break
        if not command:
            continue
        exec_command(command)

def x_it(args):
    pass
    # import readline
    # env = {}
    # pr = boxy_terminus(rules = rules)
    # pr("Unholy Grail 0.0")
    # while 1:
    #     try:
    #         command = input("<> ")
    #     except EOFError:
    #         print()
    #         break
    #     if not command:
    #         continue
    #     src = Source(command, url = "<string>")
    #     ast = parse(src)
    #     ast2 = compile(ast, False)
    #     try:
    #         result = evaluate(ast2, source = src, d = env)
    #         if result is not None:
    #             pr(result)
    #     except Exception as e:
    #         print("!!!", e)
    #     for k, v in env.items():
    #         if v == 1234:
    #             print(k, v)




if __name__ == '__main__':
    args = docopt(__doc__)

    with prerror() as p:
        for possibility in "en encode de decode tok ast hl ir eval i it test".split():
            if args[possibility]:
                globals()["x_"+possibility](args)
                break


